" Tests for grex
function s:test_command()  "{{{1
  Title ":Grey"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Assert getline(1, '$') ==> content

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Assert @/ ==> 'or'
  Assert @" ==> join(content_or, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " With range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 Grey
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix2, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Assert @/ ==> 'Super Super Mega Kawaii'
  Assert @" ==> ''
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position
endfunction




function s:test_function()  "{{{1
  Title "grex#yank()"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]
  let content_bugfix1 = [
  \     '#950 bugfix: jump behavior',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Assert getline(1, '$') ==> content

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Assert @/ ==> 'or'
  Assert @" ==> join(content_or, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " With a limited range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 call grex#yank()
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix2, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Assert @/ ==> 'Super Super Mega Kawaii'
  Assert @" ==> ''
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " No range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  1
  let cursor_position = getpos('.')
  call grex#yank()
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix1, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position
endfunction




function s:test_operator()  "{{{1
  Title "<Plug>(operator-grex-yank)"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Assert getline(1, '$') ==> content

  " With {motion}
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)G"
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " In Visual mode
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "ggvG\<Plug>(operator-grex-yank)"
  Assert @/ ==> 'or'
  Assert @" ==> join(content_or, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " With count
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)6g@"
  Assert @/ ==> 'bugfix:'
  Assert @" ==> join(content_bugfix2, "\n") . "\n"
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)G"
  Assert @/ ==> 'Super Super Mega Kawaii'
  Assert @" ==> ''
  Assert @0 ==> @"
  Assert @g ==> 'ggg'
  Assert getregtype('g') ==> "\<C-v>3"
  Assert getpos('.') ==> cursor_position
endfunction




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
