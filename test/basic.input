" Common set up  "{{{1

runtime! plugin/grex.vim




function s:describe__gred_command()  "{{{1
  It ":Gred"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or_after = [
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_or_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix2_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content
    " :undobreak opposite of :undojoin.
  execute 'normal!' "i\<C-g>u\<Esc>"

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Gred
  Should getline(1, '$') ==# content_bugfix_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Gred
  Should getline(1, '$') ==# content_or_after
  Should @/ ==# 'or'
  Should @" ==# join(content_or_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " With range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 Gred
  Should getline(1, '$') ==# content_bugfix2_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Gred
  Should getline(1, '$') ==# content
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# ['']
endfunction




function s:describe__gred_function()  "{{{1
  It "grex#delete()"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or_after = [
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_or_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix2_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]
  let content_bugfix1_after = [
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix1_deleted = [
  \     '#950 bugfix: jump behavior',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content
    " :undobreak opposite of :undojoin.
  execute 'normal!' "i\<C-g>u\<Esc>"

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#delete()
  Should getline(1, '$') ==# content_bugfix_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#delete()
  Should getline(1, '$') ==# content_or_after
  Should @/ ==# 'or'
  Should @" ==# join(content_or_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " With a limited range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 call grex#delete()
  Should getline(1, '$') ==# content_bugfix2_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#delete()
  Should getline(1, '$') ==# content
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# ['']
  silent redo
  Should getline(1, '$') ==# content

  " No range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  1
  let cursor_position = getpos('.')
  call grex#delete()
  Should getline(1, '$') ==# content_bugfix1_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix1_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content
endfunction




function s:describe__gred_operator()  "{{{1
  It "<Plug>(operator-grex-delete)"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or_after = [
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_or_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix2_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content
    " :undobreak opposite of :undojoin.
  execute 'normal!' "i\<C-g>u\<Esc>"

  " With {motion}
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-delete)G"
  Should getline(1, '$') ==# content_bugfix_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " In Visual mode
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "ggvG\<Plug>(operator-grex-delete)"
  Should getline(1, '$') ==# content_or_after
  Should @/ ==# 'or'
    " FIXME: :help grex-bugs-C
  Should @" ==# join(content_or_deleted, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " With count
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-delete)6g@"
  Should getline(1, '$') ==# content_bugfix2_after
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2_deleted, "\n") . "\n"
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-delete)G"
  Should getline(1, '$') ==# content
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
    " FIXME: :help grex-bugs-C
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# ['']
endfunction




function s:describe__grey_command()  "{{{1
  It ":Grey"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Should @/ ==# 'or'
  Should @" ==# join(content_or, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " With range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 Grey
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  Grey
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
endfunction




function s:describe__grey_function()  "{{{1
  It "grex#yank()"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]
  let content_bugfix1 = [
  \     '#950 bugfix: jump behavior',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content

  " Typical usage #1
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " Typical usage #2
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Should @/ ==# 'or'
  Should @" ==# join(content_or, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " With a limited range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  1,6 call grex#yank()
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  % call grex#yank()
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " No range
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  1
  let cursor_position = getpos('.')
  call grex#yank()
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix1, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
endfunction




function s:describe__grey_operator()  "{{{1
  It "<Plug>(operator-grex-yank)"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]
  let content_bugfix2 = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content

  " With {motion}
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)G"
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " In Visual mode
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "ggvG\<Plug>(operator-grex-yank)"
  Should @/ ==# 'or'
  Should @" ==# join(content_or, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " With count
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)6g@"
  Should @/ ==# 'bugfix:'
  Should @" ==# join(content_bugfix2, "\n") . "\n"
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position

  " No match
  let @/ = 'Super Super Mega Kawaii'
  let @" = '"""'
  let @0 = '000'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\<Plug>(operator-grex-yank)G"
  Should @/ ==# 'Super Super Mega Kawaii'
  Should @" ==# ''
  Should @0 ==# @"
  Should @g ==# 'ggg'
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
endfunction




function s:describe__operator_register_designation()  "{{{1
  It "Operators with register designation"

  let content = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_after = [
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#926 enhancement: performance',
  \     '#924 enhancement: completion',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_bugfix_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#923 bugfix: vs fold',
  \     '#931 bugfix: syntax highlighting',
  \   ]
  let content_or_after = [
  \     '#923 bugfix: vs fold',
  \     '#930 enhancement: foldlevel adjustment',
  \     '#927 todo: release',
  \     '#924 enhancement: completion',
  \     '#931 bugfix: syntax highlighting',
  \     '#928 enhancement: key mappings',
  \   ]
  let content_or_deleted = [
  \     '#950 bugfix: jump behavior',
  \     '#926 enhancement: performance',
  \   ]

  tabnew
  tabonly!

  silent put =content
  1 delete _
  Should getline(1, '$') ==# content
    " :undobreak opposite of :undojoin.
  execute 'normal!' "i\<C-g>u\<Esc>"

  " gred with register designation
  let @/ = 'bugfix:'
  let @" = '"""'
  let @0 = '000'
  let @x = 'xxx'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "gg\"x\<Plug>(operator-grex-delete)G"
  Should getline(1, '$') ==# content_bugfix_after
  Should @/ ==# 'bugfix:'
  Should @" ==# @0
  Should @0 ==# '000'
  Should @g ==# 'ggg'
  Should @x ==# join(content_bugfix_deleted, "\n") . "\n"
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# content

  " grey with register designation
  let @/ = 'or'
  let @" = '"""'
  let @0 = '000'
  let @x = 'xxx'
  call setreg('g', 'ggg', 'b')
  let cursor_position = getpos('.')
  execute 'normal' "ggvG\"x\<Plug>(operator-grex-yank)"
  Should getline(1, '$') ==# content
  Should @/ ==# 'or'
  Should @" ==# @0
  Should @0 ==# '000'
  Should @g ==# 'ggg'
  Should @x ==# join(content_or_deleted, "\n") . "\n"
  Should getregtype('g') ==# "\<C-v>3"
  Should getpos('.') ==# cursor_position
  silent undo
  Should getline(1, '$') ==# ['']
  silent redo
  Should getline(1, '$') ==# content
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
